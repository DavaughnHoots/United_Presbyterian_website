<div class="max-w-7xl mx-auto">
    <!-- Events Header -->
    <div class="mb-8 flex justify-between items-center">
        <div>
            <h1 class="text-3xl font-bold mb-2" style="color: var(--text-primary);">Events Management</h1>
            <p class="text-gray-600">Create and manage church events</p>
        </div>
        <button onclick="showAddEventModal()" class="btn-primary">
            <i class="fas fa-plus mr-2"></i>Add New Event
        </button>
    </div>
    
    <!-- Event Filters -->
    <div class="module-card mb-6">
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div>
                <label class="block text-sm font-medium mb-2">Search</label>
                <input type="text" id="searchInput" placeholder="Event title..." 
                       onkeyup="filterEvents()" class="w-full px-3 py-2 border rounded-lg">
            </div>
            <div>
                <label class="block text-sm font-medium mb-2">Status</label>
                <select id="statusFilter" onchange="filterEvents()" class="w-full px-3 py-2 border rounded-lg">
                    <option value="">All Events</option>
                    <option value="upcoming">Upcoming</option>
                    <option value="past">Past</option>
                    <option value="recurring">Recurring</option>
                </select>
            </div>
            <div>
                <label class="block text-sm font-medium mb-2">Month</label>
                <input type="month" id="monthFilter" onchange="filterEvents()" 
                       class="w-full px-3 py-2 border rounded-lg">
            </div>
            <div>
                <label class="block text-sm font-medium mb-2">Sort By</label>
                <select id="sortBy" onchange="sortEvents()" class="w-full px-3 py-2 border rounded-lg">
                    <option value="date">Date</option>
                    <option value="title">Title</option>
                    <option value="created">Recently Added</option>
                </select>
            </div>
        </div>
    </div>
    
    <!-- Events List -->
    <div class="grid gap-4">
        <% if (events && events.length > 0) { %>
            <% events.forEach(event => { %>
                <div class="module-card event-item" 
                     data-title="<%= event.title.toLowerCase() %>"
                     data-date="<%= event.startDate %>"
                     data-recurring="<%= event.isRecurring %>">
                    <div class="flex items-start justify-between">
                        <div class="flex-1">
                            <div class="flex items-center mb-2">
                                <h3 class="text-lg font-semibold mr-3"><%= event.title %></h3>
                                <% if (event.isRecurring) { %>
                                    <span class="px-2 py-1 bg-blue-100 text-blue-700 text-xs rounded">
                                        <i class="fas fa-sync mr-1"></i>Recurring
                                    </span>
                                <% } %>
                                <% 
                                    const eventDate = new Date(event.startDate);
                                    const now = new Date();
                                    const isPast = eventDate < now;
                                %>
                                <% if (isPast) { %>
                                    <span class="px-2 py-1 bg-gray-100 text-gray-700 text-xs rounded ml-2">Past</span>
                                <% } else { %>
                                    <span class="px-2 py-1 bg-green-100 text-green-700 text-xs rounded ml-2">Upcoming</span>
                                <% } %>
                            </div>
                            
                            <div class="text-sm text-gray-600 mb-2">
                                <i class="fas fa-calendar mr-2"></i>
                                <%= new Date(event.startDate).toLocaleDateString('en-US', { 
                                    weekday: 'long', 
                                    year: 'numeric', 
                                    month: 'long', 
                                    day: 'numeric' 
                                }) %>
                                <span class="mx-2">â€¢</span>
                                <i class="fas fa-clock mr-2"></i>
                                <%= new Date('2000-01-01T' + event.startTime).toLocaleTimeString('en-US', { 
                                    hour: 'numeric', 
                                    minute: '2-digit' 
                                }) %>
                                <% if (event.endTime) { %>
                                    - <%= new Date('2000-01-01T' + event.endTime).toLocaleTimeString('en-US', { 
                                        hour: 'numeric', 
                                        minute: '2-digit' 
                                    }) %>
                                <% } %>
                            </div>
                            
                            <% if (event.location) { %>
                                <div class="text-sm text-gray-600 mb-2">
                                    <i class="fas fa-map-marker-alt mr-2"></i><%= event.location %>
                                </div>
                            <% } %>
                            
                            <% if (event.description) { %>
                                <p class="text-sm text-gray-700 mb-3"><%= event.description %></p>
                            <% } %>
                            
                            <% if (event.link) { %>
                                <div class="text-sm mb-3">
                                    <a href="<%= event.link %>" target="_blank" rel="noopener noreferrer" 
                                       class="text-blue-600 hover:underline">
                                        <i class="fas fa-external-link-alt mr-1"></i>Event Link
                                    </a>
                                </div>
                            <% } %>
                            
                            <% if (event.maxAttendees && event.EventRegistrations) { %>
                                <div class="flex items-center space-x-4 text-sm">
                                    <div>
                                        <i class="fas fa-users mr-1"></i>
                                        <span class="font-medium"><%= event.EventRegistrations.length %></span> / <%= event.maxAttendees %> registered
                                    </div>
                                    <div class="w-32 bg-gray-200 rounded-full h-2">
                                        <div class="bg-blue-600 h-2 rounded-full" 
                                             style="width: <%= (event.EventRegistrations.length / event.maxAttendees * 100) %>%"></div>
                                    </div>
                                </div>
                            <% } %>
                        </div>
                        
                        <div class="flex space-x-2">
                            <button onclick="viewRegistrations('<%= event.id %>')" 
                                    class="text-blue-600 hover:bg-blue-50 p-2 rounded" title="View Registrations">
                                <i class="fas fa-list"></i>
                            </button>
                            <button onclick="editEvent('<%= event.id %>')" 
                                    class="text-gray-600 hover:bg-gray-50 p-2 rounded" title="Edit">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button onclick="deleteEvent('<%= event.id %>')" 
                                    class="text-red-600 hover:bg-red-50 p-2 rounded" title="Delete">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                </div>
            <% }) %>
        <% } else { %>
            <div class="module-card text-center py-12">
                <i class="fas fa-calendar-alt text-6xl text-gray-300 mb-4"></i>
                <h3 class="text-xl font-semibold mb-2">No Events Yet</h3>
                <p class="text-gray-600 mb-4">Start by creating your first church event</p>
                <button onclick="showAddEventModal()" class="btn-primary">
                    <i class="fas fa-plus mr-2"></i>Add Event
                </button>
            </div>
        <% } %>
    </div>
</div>

<!-- Add/Edit Event Modal -->
<div id="eventModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div class="p-6">
                <div class="flex justify-between items-center mb-6">
                    <h2 class="text-2xl font-bold" id="modalTitle">Add New Event</h2>
                    <button onclick="closeEventModal()" class="text-gray-500 hover:text-gray-700">
                        <i class="fas fa-times text-xl"></i>
                    </button>
                </div>
                
                <form id="eventForm" onsubmit="saveEvent(event)">
                    <input type="hidden" id="eventId" name="id">
                    
                    <div class="space-y-4">
                        <div>
                            <label class="block text-sm font-medium mb-2">Event Title*</label>
                            <input type="text" id="eventTitle" name="title" required 
                                   class="w-full px-3 py-2 border rounded-lg">
                        </div>
                        
                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium mb-2">Date*</label>
                                <input type="date" id="eventDate" name="startDate" required 
                                       class="w-full px-3 py-2 border rounded-lg">
                            </div>
                            <div>
                                <label class="block text-sm font-medium mb-2">Start Time*</label>
                                <input type="time" id="eventStartTime" name="startTime" required 
                                       class="w-full px-3 py-2 border rounded-lg">
                            </div>
                        </div>
                        
                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium mb-2">End Time</label>
                                <input type="time" id="eventEndTime" name="endTime" 
                                       class="w-full px-3 py-2 border rounded-lg">
                            </div>
                            <div>
                                <label class="block text-sm font-medium mb-2">Location</label>
                                <input type="text" id="eventLocation" name="location" 
                                       placeholder="Main Sanctuary" 
                                       class="w-full px-3 py-2 border rounded-lg">
                            </div>
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium mb-2">Description</label>
                            <textarea id="eventDescription" name="description" rows="3" 
                                      class="w-full px-3 py-2 border rounded-lg"></textarea>
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium mb-2">Link (URL)</label>
                            <input type="url" id="eventLink" name="link" 
                                   placeholder="https://example.com/registration" 
                                   class="w-full px-3 py-2 border rounded-lg">
                            <p class="text-xs text-gray-500 mt-1">Optional: Add a link for registration or more information</p>
                        </div>
                        
                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium mb-2">Max Attendees</label>
                                <input type="number" id="eventMaxAttendees" name="maxAttendees" 
                                       min="1" placeholder="Leave blank for unlimited" 
                                       class="w-full px-3 py-2 border rounded-lg">
                            </div>
                            <div>
                                <label class="block text-sm font-medium mb-2">Registration Deadline</label>
                                <input type="date" id="eventDeadline" name="registrationDeadline" 
                                       class="w-full px-3 py-2 border rounded-lg">
                            </div>
                        </div>
                        
                        <div>
                            <label class="flex items-center">
                                <input type="checkbox" id="eventRecurring" name="isRecurring" class="mr-2">
                                <span>This is a recurring event</span>
                            </label>
                        </div>
                        
                        <div id="recurringOptions" class="hidden space-y-4 p-4 bg-gray-50 rounded-lg">
                            <div>
                                <label class="block text-sm font-medium mb-2">Recurrence Pattern</label>
                                <select id="recurrencePattern" name="recurrencePattern" 
                                        class="w-full px-3 py-2 border rounded-lg">
                                    <option value="daily">Daily</option>
                                    <option value="weekly">Weekly</option>
                                    <option value="biweekly">Bi-weekly</option>
                                    <option value="monthly">Monthly</option>
                                </select>
                            </div>
                            <div>
                                <label class="block text-sm font-medium mb-2">End Date</label>
                                <input type="date" id="recurrenceEnd" name="recurrenceEnd" 
                                       class="w-full px-3 py-2 border rounded-lg">
                            </div>
                        </div>
                        
                        <div>
                            <label class="flex items-center">
                                <input type="checkbox" id="eventRequireRegistration" name="requireRegistration" class="mr-2">
                                <span>Require registration for this event</span>
                            </label>
                        </div>
                        
                        <div>
                            <label class="flex items-center">
                                <input type="checkbox" id="eventShowInHappeningNow" name="showInHappeningNow" class="mr-2">
                                <span>Show in "Happening Now" section on home page</span>
                            </label>
                        </div>
                    </div>
                    
                    <div class="mt-6 flex justify-end space-x-3">
                        <button type="button" onclick="closeEventModal()" class="btn-secondary">Cancel</button>
                        <button type="submit" class="btn-primary">
                            <i class="fas fa-save mr-2"></i>Save Event
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Registrations Modal -->
<div id="registrationsModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto">
            <div class="p-6">
                <div class="flex justify-between items-center mb-6">
                    <h2 class="text-2xl font-bold">Event Registrations</h2>
                    <button onclick="closeRegistrationsModal()" class="text-gray-500 hover:text-gray-700">
                        <i class="fas fa-times text-xl"></i>
                    </button>
                </div>
                
                <div id="registrationsList">
                    <!-- Registrations will be loaded here -->
                </div>
                
                <div class="mt-6 flex justify-between">
                    <button onclick="exportRegistrations()" class="btn-secondary">
                        <i class="fas fa-download mr-2"></i>Export to CSV
                    </button>
                    <button onclick="closeRegistrationsModal()" class="btn-primary">Close</button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
let allEvents = [];
let currentEventId = null;

// Store events data
<% if (events) { %>
    allEvents = <%- JSON.stringify(events) %>;
<% } %>

// Event form handling
document.getElementById('eventRecurring').addEventListener('change', function() {
    document.getElementById('recurringOptions').classList.toggle('hidden', !this.checked);
});

function showAddEventModal() {
    document.getElementById('modalTitle').textContent = 'Add New Event';
    document.getElementById('eventForm').reset();
    document.getElementById('eventId').value = '';
    document.getElementById('recurringOptions').classList.add('hidden');
    document.getElementById('eventModal').classList.remove('hidden');
}

function formatDateForInput(dateString) {
    if (!dateString) return '';
    const date = new Date(dateString);
    if (isNaN(date.getTime())) return '';
    return date.toISOString().split('T')[0];
}

function editEvent(eventId) {
    const event = allEvents.find(e => e.id === eventId);
    if (!event) return;
    
    document.getElementById('modalTitle').textContent = 'Edit Event';
    document.getElementById('eventId').value = event.id;
    document.getElementById('eventTitle').value = event.title;
    document.getElementById('eventDate').value = formatDateForInput(event.startDate);
    document.getElementById('eventStartTime').value = event.startTime;
    document.getElementById('eventEndTime').value = event.endTime || '';
    document.getElementById('eventLocation').value = event.location || '';
    document.getElementById('eventDescription').value = event.description || '';
    document.getElementById('eventMaxAttendees').value = event.maxAttendees || '';
    document.getElementById('eventDeadline').value = formatDateForInput(event.registrationDeadline);
    document.getElementById('eventLink').value = event.link || '';
    document.getElementById('eventRecurring').checked = event.isRecurring;
    document.getElementById('eventRequireRegistration').checked = event.requireRegistration;
    document.getElementById('eventShowInHappeningNow').checked = event.showInHappeningNow;
    
    if (event.isRecurring) {
        document.getElementById('recurringOptions').classList.remove('hidden');
        document.getElementById('recurrencePattern').value = event.recurrencePattern || 'weekly';
        document.getElementById('recurrenceEnd').value = formatDateForInput(event.recurrenceEnd);
    }
    
    document.getElementById('eventModal').classList.remove('hidden');
}

function closeEventModal() {
    document.getElementById('eventModal').classList.add('hidden');
}

async function saveEvent(e) {
    e.preventDefault();
    
    const formData = new FormData(document.getElementById('eventForm'));
    const eventData = Object.fromEntries(formData);
    
    // Remove empty id field to allow UUID auto-generation
    if (!eventData.id) {
        delete eventData.id;
    }
    
    // Convert checkboxes
    eventData.isRecurring = !!eventData.isRecurring;
    eventData.requireRegistration = !!eventData.requireRegistration;
    eventData.showInHappeningNow = !!eventData.showInHappeningNow;
    
    // Clean up data
    if (!eventData.maxAttendees) delete eventData.maxAttendees;
    if (!eventData.isRecurring) {
        delete eventData.recurrencePattern;
        delete eventData.recurrenceEnd;
    }
    
    try {
        const url = eventData.id ? `/admin/api/events/${eventData.id}` : '/admin/api/events';
        const method = eventData.id ? 'PUT' : 'POST';
        
        const response = await fetch(url, {
            method: method,
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(eventData)
        });
        
        if (response.ok) {
            location.reload();
        } else {
            const error = await response.json();
            alert('Error saving event: ' + (error.message || 'Unknown error'));
        }
    } catch (error) {
        alert('Error: ' + error.message);
    }
}

async function deleteEvent(eventId) {
    if (!confirm('Are you sure you want to delete this event?')) return;
    
    try {
        const response = await fetch(`/admin/api/events/${eventId}`, {
            method: 'DELETE'
        });
        
        if (response.ok) {
            location.reload();
        } else {
            alert('Failed to delete event');
        }
    } catch (error) {
        alert('Error: ' + error.message);
    }
}

async function viewRegistrations(eventId) {
    currentEventId = eventId;
    const event = allEvents.find(e => e.id === eventId);
    if (!event) return;
    
    try {
        const response = await fetch(`/admin/api/events/${eventId}/registrations`);
        const registrations = await response.json();
        
        let html = `
            <h3 class="text-lg font-semibold mb-4">${event.title}</h3>
            <p class="text-sm text-gray-600 mb-4">
                ${new Date(event.startDate).toLocaleDateString()} at ${event.startTime}
            </p>
        `;
        
        if (registrations.length > 0) {
            html += `
                <div class="overflow-x-auto">
                    <table class="w-full">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="text-left px-4 py-2">Name</th>
                                <th class="text-left px-4 py-2">Email</th>
                                <th class="text-left px-4 py-2">Phone</th>
                                <th class="text-left px-4 py-2">Registered</th>
                                <th class="text-center px-4 py-2">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
            `;
            
            registrations.forEach(reg => {
                html += `
                    <tr class="border-b">
                        <td class="px-4 py-2">${reg.User ? reg.User.firstName + ' ' + reg.User.lastName : reg.guestName}</td>
                        <td class="px-4 py-2">${reg.User ? reg.User.email : reg.guestEmail}</td>
                        <td class="px-4 py-2">${reg.guestPhone || '-'}</td>
                        <td class="px-4 py-2">${new Date(reg.createdAt).toLocaleDateString()}</td>
                        <td class="px-4 py-2 text-center">
                            <button onclick="removeRegistration('${reg.id}')" 
                                    class="text-red-600 hover:bg-red-50 p-2 rounded">
                                <i class="fas fa-times"></i>
                            </button>
                        </td>
                    </tr>
                `;
            });
            
            html += `
                        </tbody>
                    </table>
                </div>
            `;
        } else {
            html += `
                <div class="text-center py-8 text-gray-500">
                    <i class="fas fa-users text-4xl mb-2"></i>
                    <p>No registrations yet</p>
                </div>
            `;
        }
        
        document.getElementById('registrationsList').innerHTML = html;
        document.getElementById('registrationsModal').classList.remove('hidden');
    } catch (error) {
        alert('Error loading registrations: ' + error.message);
    }
}

function closeRegistrationsModal() {
    document.getElementById('registrationsModal').classList.add('hidden');
}

async function removeRegistration(registrationId) {
    if (!confirm('Remove this registration?')) return;
    
    try {
        const response = await fetch(`/admin/api/registrations/${registrationId}`, {
            method: 'DELETE'
        });
        
        if (response.ok) {
            viewRegistrations(currentEventId); // Refresh the list
        } else {
            alert('Failed to remove registration');
        }
    } catch (error) {
        alert('Error: ' + error.message);
    }
}

async function exportRegistrations() {
    if (!currentEventId) return;
    
    try {
        const response = await fetch(`/admin/api/events/${currentEventId}/registrations/export`);
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `registrations_${new Date().toISOString().split('T')[0]}.csv`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
    } catch (error) {
        alert('Error exporting registrations: ' + error.message);
    }
}

function filterEvents() {
    const search = document.getElementById('searchInput').value.toLowerCase();
    const status = document.getElementById('statusFilter').value;
    const month = document.getElementById('monthFilter').value;
    
    const events = document.querySelectorAll('.event-item');
    
    events.forEach(event => {
        const title = event.dataset.title;
        const date = event.dataset.date;
        const isRecurring = event.dataset.recurring === 'true';
        const eventDate = new Date(date);
        const now = new Date();
        const isPast = eventDate < now;
        
        let show = true;
        
        // Search filter
        if (search && !title.includes(search)) show = false;
        
        // Status filter
        if (status === 'upcoming' && isPast) show = false;
        if (status === 'past' && !isPast) show = false;
        if (status === 'recurring' && !isRecurring) show = false;
        
        // Month filter
        if (month) {
            const [year, monthNum] = month.split('-');
            if (eventDate.getFullYear() != year || eventDate.getMonth() + 1 != monthNum) {
                show = false;
            }
        }
        
        event.style.display = show ? '' : 'none';
    });
}

function sortEvents() {
    // Implement sorting logic if needed
}

// Close modals when clicking outside
document.getElementById('eventModal').addEventListener('click', function(e) {
    if (e.target === this) closeEventModal();
});

document.getElementById('registrationsModal').addEventListener('click', function(e) {
    if (e.target === this) closeRegistrationsModal();
});
</script>