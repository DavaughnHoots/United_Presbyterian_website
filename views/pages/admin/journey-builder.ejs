
<div class="max-w-7xl mx-auto px-4 py-8">
<div class="journey-builder">
  <div class="builder-header">
    <h1><%= journey ? 'Edit Journey' : 'Create New Journey' %></h1>
    <div class="header-actions">
      <button class="btn btn-secondary" onclick="saveJourney(false)">
        <i class="fas fa-save"></i> Save Draft
      </button>
      <button class="btn btn-primary" onclick="saveJourney(true)">
        <i class="fas fa-check"></i> Save & Publish
      </button>
      <a href="/admin/journeys" class="btn btn-outline-secondary">
        <i class="fas fa-times"></i> Cancel
      </a>
    </div>
  </div>

  <div class="journey-info">
    <div class="form-group">
      <label for="journeyTitle">Journey Title</label>
      <input type="text" id="journeyTitle" class="form-control" 
             value="<%= journey ? journey.title : '' %>" 
             placeholder="Enter journey title...">
    </div>
    <div class="form-group">
      <label for="journeyDescription">Description</label>
      <textarea id="journeyDescription" class="form-control" rows="3" 
                placeholder="Describe this spiritual journey..."><%= journey ? journey.description : '' %></textarea>
    </div>
    <div class="form-row">
      <div class="form-group col-md-6">
        <label for="journeyDuration">Duration (days)</label>
        <input type="number" id="journeyDuration" class="form-control" 
               value="<%= journey ? journey.duration_days : 30 %>" min="1" max="365">
      </div>
      <div class="form-group col-md-6">
        <label for="journeyTheme">Theme</label>
        <select id="journeyTheme" class="form-control">
          <option value="general" <%= journey && journey.theme === 'general' ? 'selected' : '' %>>General</option>
          <option value="prayer" <%= journey && journey.theme === 'prayer' ? 'selected' : '' %>>Prayer</option>
          <option value="scripture" <%= journey && journey.theme === 'scripture' ? 'selected' : '' %>>Scripture Study</option>
          <option value="discipleship" <%= journey && journey.theme === 'discipleship' ? 'selected' : '' %>>Discipleship</option>
          <option value="advent" <%= journey && journey.theme === 'advent' ? 'selected' : '' %>>Advent</option>
          <option value="lent" <%= journey && journey.theme === 'lent' ? 'selected' : '' %>>Lent</option>
        </select>
      </div>
    </div>
  </div>

  <div class="journey-path-container">
    <h2>Journey Path</h2>
    <div class="path-controls">
      <button class="btn btn-sm btn-primary" onclick="addDay()">
        <i class="fas fa-plus"></i> Add Day
      </button>
      <button class="btn btn-sm btn-secondary" onclick="zoomIn()">
        <i class="fas fa-search-plus"></i>
      </button>
      <button class="btn btn-sm btn-secondary" onclick="zoomOut()">
        <i class="fas fa-search-minus"></i>
      </button>
      <button class="btn btn-sm btn-secondary" onclick="resetView()">
        <i class="fas fa-compress"></i> Reset View
      </button>
    </div>
    
    <div id="journeyPath" class="journey-path">
      <svg id="pathSvg" width="100%" height="600">
        <defs>
          <pattern id="gridPattern" width="20" height="20" patternUnits="userSpaceOnUse">
            <path d="M 20 0 L 0 0 0 20" fill="none" stroke="#f0f0f0" stroke-width="1"/>
          </pattern>
        </defs>
        <rect width="100%" height="100%" fill="url(#gridPattern)" />
        <g id="pathGroup" transform="translate(0,0) scale(1)">
          <!-- Path and nodes will be drawn here -->
        </g>
      </svg>
    </div>
  </div>

  <!-- Day editor modal -->
  <div id="dayEditorModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h3>Edit Day <span id="dayNumber"></span></h3>
        <button class="close-btn" onclick="closeDayEditor()">&times;</button>
      </div>
      <div class="modal-body">
        <div class="form-group">
          <label for="dayTitle">Day Title</label>
          <input type="text" id="dayTitle" class="form-control" placeholder="e.g., Finding Peace">
        </div>
        <div class="form-group">
          <label for="dayDescription">Description</label>
          <textarea id="dayDescription" class="form-control" rows="3" 
                    placeholder="Brief description of this day's focus..."></textarea>
        </div>
        
        <h4>Content for this day</h4>
        <div id="dayContents" class="day-contents">
          <!-- Content items will be listed here -->
        </div>
        
        <button class="btn btn-sm btn-primary" onclick="addContent()">
          <i class="fas fa-plus"></i> Add Content
        </button>
      </div>
      <div class="modal-footer">
        <button class="btn btn-secondary" onclick="closeDayEditor()">Cancel</button>
        <button class="btn btn-primary" onclick="saveDayContent()">Save Day</button>
      </div>
    </div>
  </div>
</div>

<style>
.journey-builder {
  padding: 1rem;
}

.builder-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
}

.header-actions {
  display: flex;
  gap: 0.5rem;
}

.journey-info {
  background: white;
  padding: 1.5rem;
  border-radius: 8px;
  margin-bottom: 2rem;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.journey-path-container {
  background: white;
  padding: 1.5rem;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.path-controls {
  display: flex;
  gap: 0.5rem;
  margin-bottom: 1rem;
}

.journey-path {
  border: 1px solid #ddd;
  border-radius: 8px;
  overflow: hidden;
  position: relative;
  cursor: grab;
}

.journey-path.dragging {
  cursor: grabbing;
}

/* Journey path styles */
.path-line {
  fill: none;
  stroke: #87CEEB;
  stroke-width: 4;
  stroke-linecap: round;
}

.path-node {
  cursor: pointer;
  transition: all 0.3s ease;
}

.path-node:hover {
  transform: scale(1.1);
}

.node-circle {
  fill: white;
  stroke: #87CEEB;
  stroke-width: 3;
}

.node-circle.completed {
  fill: #28a745;
}

.node-circle.current {
  fill: #ffc107;
  stroke: #ffc107;
}

.node-number {
  fill: #333;
  font-weight: bold;
  font-size: 14px;
  text-anchor: middle;
  dominant-baseline: central;
  pointer-events: none;
}

/* Modal styles */
.modal {
  display: none;
  position: fixed;
  z-index: 1000;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0,0,0,0.5);
}

.modal-content {
  background-color: white;
  margin: 5% auto;
  padding: 0;
  border-radius: 8px;
  width: 90%;
  max-width: 600px;
  max-height: 80vh;
  overflow-y: auto;
}

.modal-header {
  padding: 1rem 1.5rem;
  border-bottom: 1px solid #ddd;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.modal-body {
  padding: 1.5rem;
}

.modal-footer {
  padding: 1rem 1.5rem;
  border-top: 1px solid #ddd;
  display: flex;
  justify-content: flex-end;
  gap: 0.5rem;
}

.close-btn {
  background: none;
  border: none;
  font-size: 1.5rem;
  cursor: pointer;
  color: #666;
}

.day-contents {
  margin: 1rem 0;
  border: 1px solid #ddd;
  border-radius: 4px;
  padding: 1rem;
  min-height: 100px;
}

.content-item {
  background: #f8f9fa;
  padding: 0.75rem;
  margin-bottom: 0.5rem;
  border-radius: 4px;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.content-item:last-child {
  margin-bottom: 0;
}
</style>

<script>
// Journey data
let journeyData = {
  id: <%= journey ? journey.id : 'null' %>,
  title: '<%= journey ? journey.title : '' %>',
  description: '<%= journey ? journey.description : '' %>',
  duration_days: <%= journey ? journey.duration_days : 30 %>,
  theme: '<%= journey ? journey.theme : 'general' %>',
  days: <%= journeyDays ? JSON.stringify(journeyDays) : '[]' %>
};

// SVG elements
let svg, pathGroup;
let currentScale = 1;
let currentTranslate = { x: 0, y: 0 };
let isDragging = false;
let dragStart = { x: 0, y: 0 };
let selectedDay = null;

// Initialize on load
document.addEventListener('DOMContentLoaded', function() {
  svg = document.getElementById('pathSvg');
  pathGroup = document.getElementById('pathGroup');
  
  // Initialize journey path
  if (journeyData.days.length === 0) {
    // Create default days for new journey
    for (let i = 1; i <= journeyData.duration_days; i++) {
      journeyData.days.push({
        day_number: i,
        title: '',
        description: '',
        contents: []
      });
    }
  }
  
  drawJourneyPath();
  setupPanZoom();
});

// Draw the journey path
function drawJourneyPath() {
  const days = journeyData.days;
  const nodeRadius = 25;
  const nodeSpacing = 100;
  const pathHeight = 500;
  const pathWidth = days.length * nodeSpacing + 200;
  
  // Clear existing content
  pathGroup.innerHTML = '';
  
  // Create winding path
  let pathData = 'M 100 250';
  const nodes = [];
  
  for (let i = 0; i < days.length; i++) {
    const x = 100 + (i * nodeSpacing);
    // Create a winding path with sine wave
    const y = 250 + Math.sin(i * 0.5) * 100;
    
    if (i === 0) {
      pathData = `M ${x} ${y}`;
    } else {
      // Create smooth curve between nodes
      const prevX = nodes[i-1].x;
      const prevY = nodes[i-1].y;
      const midX = (prevX + x) / 2;
      pathData += ` Q ${midX} ${prevY} ${x} ${y}`;
    }
    
    nodes.push({ x, y, day: days[i] });
  }
  
  // Draw the path
  const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
  path.setAttribute('d', pathData);
  path.setAttribute('class', 'path-line');
  pathGroup.appendChild(path);
  
  // Draw nodes
  nodes.forEach((node, index) => {
    const g = document.createElementNS('http://www.w3.org/2000/svg', 'g');
    g.setAttribute('class', 'path-node');
    g.setAttribute('transform', `translate(${node.x}, ${node.y})`);
    g.setAttribute('data-day', index + 1);
    g.onclick = () => editDay(index + 1);
    
    // Node circle
    const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
    circle.setAttribute('r', nodeRadius);
    circle.setAttribute('class', 'node-circle');
    
    // Add status classes
    if (node.day.contents && node.day.contents.length > 0) {
      circle.classList.add('completed');
    }
    
    // Node number
    const text = document.createElementNS('http://www.w3.org/2000/svg', 'text');
    text.setAttribute('class', 'node-number');
    text.textContent = index + 1;
    
    g.appendChild(circle);
    g.appendChild(text);
    pathGroup.appendChild(g);
  });
  
  // Update SVG viewBox
  svg.setAttribute('viewBox', `0 0 ${pathWidth} ${pathHeight}`);
}

// Pan and zoom functionality
function setupPanZoom() {
  svg.addEventListener('mousedown', startDrag);
  svg.addEventListener('mousemove', drag);
  svg.addEventListener('mouseup', endDrag);
  svg.addEventListener('mouseleave', endDrag);
  svg.addEventListener('wheel', handleZoom);
}

function startDrag(e) {
  if (e.target === svg || e.target.id === 'gridPattern') {
    isDragging = true;
    dragStart = { x: e.clientX - currentTranslate.x, y: e.clientY - currentTranslate.y };
    svg.classList.add('dragging');
  }
}

function drag(e) {
  if (!isDragging) return;
  
  currentTranslate.x = e.clientX - dragStart.x;
  currentTranslate.y = e.clientY - dragStart.y;
  updateTransform();
}

function endDrag() {
  isDragging = false;
  svg.classList.remove('dragging');
}

function handleZoom(e) {
  e.preventDefault();
  const delta = e.deltaY > 0 ? 0.9 : 1.1;
  currentScale = Math.max(0.5, Math.min(3, currentScale * delta));
  updateTransform();
}

function updateTransform() {
  pathGroup.setAttribute('transform', 
    `translate(${currentTranslate.x}, ${currentTranslate.y}) scale(${currentScale})`);
}

function zoomIn() {
  currentScale = Math.min(3, currentScale * 1.2);
  updateTransform();
}

function zoomOut() {
  currentScale = Math.max(0.5, currentScale * 0.8);
  updateTransform();
}

function resetView() {
  currentScale = 1;
  currentTranslate = { x: 0, y: 0 };
  updateTransform();
}

// Day management
function addDay() {
  const newDayNumber = journeyData.days.length + 1;
  journeyData.days.push({
    day_number: newDayNumber,
    title: '',
    description: '',
    contents: []
  });
  journeyData.duration_days = journeyData.days.length;
  document.getElementById('journeyDuration').value = journeyData.duration_days;
  drawJourneyPath();
}

function editDay(dayNumber) {
  selectedDay = dayNumber;
  const day = journeyData.days[dayNumber - 1];
  
  document.getElementById('dayNumber').textContent = dayNumber;
  document.getElementById('dayTitle').value = day.title || '';
  document.getElementById('dayDescription').value = day.description || '';
  
  // Display contents
  displayDayContents(day.contents || []);
  
  // Show modal
  document.getElementById('dayEditorModal').style.display = 'block';
}

function closeDayEditor() {
  document.getElementById('dayEditorModal').style.display = 'none';
  selectedDay = null;
}

function displayDayContents(contents) {
  const container = document.getElementById('dayContents');
  container.innerHTML = '';
  
  if (contents.length === 0) {
    container.innerHTML = '<p class="text-muted">No content added yet</p>';
    return;
  }
  
  contents.forEach((content, index) => {
    const item = document.createElement('div');
    item.className = 'content-item';
    item.innerHTML = `
      <div>
        <strong>${content.content_type}</strong>
        <span class="text-muted ml-2">${content.duration_minutes || 5} minutes</span>
      </div>
      <button class="btn btn-sm btn-danger" onclick="removeContent(${index})">
        <i class="fas fa-trash"></i>
      </button>
    `;
    container.appendChild(item);
  });
}

function addContent() {
  // This would open a content selector modal
  alert('Content selector would open here to choose Bible reading, prayer, or reflection');
}

function removeContent(index) {
  if (selectedDay) {
    journeyData.days[selectedDay - 1].contents.splice(index, 1);
    displayDayContents(journeyData.days[selectedDay - 1].contents);
  }
}

function saveDayContent() {
  if (selectedDay) {
    const day = journeyData.days[selectedDay - 1];
    day.title = document.getElementById('dayTitle').value;
    day.description = document.getElementById('dayDescription').value;
    
    // Save to server
    saveDayToServer(day);
    
    // Update visual
    drawJourneyPath();
    closeDayEditor();
  }
}

// Save functions
async function saveJourney(publish) {
  journeyData.title = document.getElementById('journeyTitle').value;
  journeyData.description = document.getElementById('journeyDescription').value;
  journeyData.duration_days = parseInt(document.getElementById('journeyDuration').value);
  journeyData.theme = document.getElementById('journeyTheme').value;
  journeyData.is_published = publish;
  
  if (!journeyData.title) {
    alert('Please enter a journey title');
    return;
  }
  
  try {
    const response = await fetch('/admin/api/journeys', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(journeyData)
    });
    
    if (response.ok) {
      const result = await response.json();
      if (!journeyData.id) {
        journeyData.id = result.journey.id;
        // Redirect to edit mode
        window.location.href = `/admin/journeys/builder/${journeyData.id}`;
      } else {
        alert('Journey saved successfully!');
      }
    } else {
      const error = await response.json();
      alert('Error: ' + (error.error || 'Failed to save journey'));
    }
  } catch (error) {
    console.error('Error saving journey:', error);
    alert('Failed to save journey');
  }
}

async function saveDayToServer(day) {
  if (!journeyData.id) {
    alert('Please save the journey first');
    return;
  }
  
  try {
    const response = await fetch(`/admin/api/journeys/${journeyData.id}/days`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        dayNumber: day.day_number,
        title: day.title,
        description: day.description,
        contents: day.contents
      })
    });
    
    if (!response.ok) {
      const error = await response.json();
      alert('Error: ' + (error.error || 'Failed to save day'));
    }
  } catch (error) {
    console.error('Error saving day:', error);
    alert('Failed to save day');
  }
}

// Close modal when clicking outside
window.onclick = function(event) {
  const modal = document.getElementById('dayEditorModal');
  if (event.target === modal) {
    closeDayEditor();
  }
}
</script>
</div>

