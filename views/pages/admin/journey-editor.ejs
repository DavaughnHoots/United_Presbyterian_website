<div class="max-w-7xl mx-auto px-4 py-8">
  <div class="journey-editor">
    <div class="editor-header">
      <div>
        <h1>Edit Journey: <%= journey.title %></h1>
        <p class="text-muted"><%= journey.description %></p>
      </div>
      <div class="header-actions">
        <a href="/admin/journeys/preview/<%= journey.id %>" target="_blank" class="btn btn-secondary">
          <i class="fas fa-eye"></i> Preview
        </a>
        <button class="btn btn-primary" onclick="saveJourney()">
          <i class="fas fa-save"></i> Save Changes
        </button>
        <a href="/admin/journeys" class="btn btn-outline-secondary">
          <i class="fas fa-arrow-left"></i> Back
        </a>
      </div>
    </div>

    <div class="journey-settings">
      <div class="form-row">
        <div class="form-group col-md-6">
          <label for="journeyTitle">Journey Title</label>
          <input type="text" id="journeyTitle" class="form-control" value="<%= journey.title %>">
        </div>
        <div class="form-group col-md-3">
          <label for="journeyTheme">Theme</label>
          <select id="journeyTheme" class="form-control">
            <option value="general" <%= journey.theme === 'general' ? 'selected' : '' %>>General</option>
            <option value="prayer" <%= journey.theme === 'prayer' ? 'selected' : '' %>>Prayer</option>
            <option value="scripture" <%= journey.theme === 'scripture' ? 'selected' : '' %>>Scripture Study</option>
            <option value="discipleship" <%= journey.theme === 'discipleship' ? 'selected' : '' %>>Discipleship</option>
            <option value="advent" <%= journey.theme === 'advent' ? 'selected' : '' %>>Advent</option>
            <option value="lent" <%= journey.theme === 'lent' ? 'selected' : '' %>>Lent</option>
          </select>
        </div>
        <div class="form-group col-md-3">
          <label for="journeyStatus">Status</label>
          <select id="journeyStatus" class="form-control">
            <option value="false" <%= !journey.is_published ? 'selected' : '' %>>Draft</option>
            <option value="true" <%= journey.is_published ? 'selected' : '' %>>Published</option>
          </select>
        </div>
      </div>
      <div class="form-group">
        <label for="journeyDescription">Description</label>
        <textarea id="journeyDescription" class="form-control" rows="2"><%= journey.description %></textarea>
      </div>
    </div>

    <div class="days-section">
      <div class="section-header">
        <h2>Journey Days (<%= journeyDays.length %>)</h2>
        <button class="btn btn-primary btn-sm" onclick="addDay()">
          <i class="fas fa-plus"></i> Add Day
        </button>
      </div>

      <div class="days-list">
        <% journeyDays.forEach((day, index) => { %>
          <div class="day-card" data-day-id="<%= day.id %>" data-day-number="<%= day.day_number %>">
            <div class="day-header">
              <div class="day-number">Day <%= day.day_number %></div>
              <div class="day-actions">
                <button class="btn btn-sm btn-outline-primary" onclick="editDay('<%= day.id || '' %>')">
                  <i class="fas fa-edit"></i> Edit
                </button>
                <button class="btn btn-sm btn-outline-danger" onclick="deleteDay('<%= day.id || '' %>', <%= day.day_number %>)">
                  <i class="fas fa-trash"></i>
                </button>
              </div>
            </div>
            
            <div class="day-content">
              <h3 class="day-title"><%= day.title || 'Untitled Day' %></h3>
              <p class="day-description"><%= day.description || 'No description' %></p>
              
              <div class="day-contents">
                <% if (day.contents && day.contents.length > 0) { %>
                  <div class="content-count">
                    <i class="fas fa-list"></i> <%= day.contents.length %> content items
                  </div>
                <% } else { %>
                  <div class="no-content">
                    <i class="fas fa-exclamation-circle"></i> No content added yet
                  </div>
                <% } %>
              </div>
            </div>
          </div>
        <% }) %>
      </div>
    </div>
  </div>

  <!-- Day Editor Modal -->
  <div id="dayModal" class="modal" style="display: none;">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h3>Edit Day <span id="modalDayNumber"></span></h3>
          <button type="button" class="close" onclick="closeDayModal()">&times;</button>
        </div>
        <div class="modal-body">
          <input type="hidden" id="modalDayId">
          <div class="form-group">
            <label for="modalDayTitle">Day Title</label>
            <input type="text" id="modalDayTitle" class="form-control" placeholder="e.g., Finding Peace">
          </div>
          <div class="form-group">
            <label for="modalDayDescription">Description</label>
            <textarea id="modalDayDescription" class="form-control" rows="3" 
                      placeholder="Brief description of this day's focus..."></textarea>
          </div>
          
          <h4>Content Items</h4>
          <div id="modalDayContents" class="content-items">
            <!-- Content items will be loaded here -->
          </div>
          
          <button class="btn btn-sm btn-primary" onclick="addContentItem()">
            <i class="fas fa-plus"></i> Add Content
          </button>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" onclick="closeDayModal()">Cancel</button>
          <button type="button" class="btn btn-primary" onclick="saveDayChanges()">Save Changes</button>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Content Picker Modal -->
  <div id="contentPickerModal" class="modal" style="display: none;">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h3>Select Content</h3>
          <button type="button" class="close" onclick="closeContentPicker()">&times;</button>
        </div>
        <div class="modal-body">
          <!-- Content Type Tabs -->
          <div class="content-tabs">
            <button class="tab-btn active" onclick="switchContentTab('bible')">
              <i class="fas fa-bible"></i> Bible Verse
            </button>
            <button class="tab-btn" onclick="switchContentTab('scripture_reading')">
              <i class="fas fa-book-open"></i> Scripture Reading
            </button>
            <button class="tab-btn" onclick="switchContentTab('prayer')">
              <i class="fas fa-praying-hands"></i> Prayer
            </button>
            <button class="tab-btn" onclick="switchContentTab('hymn')">
              <i class="fas fa-music"></i> Hymn
            </button>
            <button class="tab-btn" onclick="switchContentTab('artwork')">
              <i class="fas fa-image"></i> Artwork
            </button>
            <button class="tab-btn" onclick="switchContentTab('video')">
              <i class="fas fa-video"></i> Video
            </button>
            <button class="tab-btn" onclick="switchContentTab('journaling')">
              <i class="fas fa-pencil-alt"></i> Journaling
            </button>
            <button class="tab-btn" onclick="switchContentTab('guided_prayer')">
              <i class="fas fa-headphones"></i> Guided Prayer
            </button>
            <button class="tab-btn" onclick="switchContentTab('reflection')">
              <i class="fas fa-pen"></i> Reflection
            </button>
          </div>
          
          <!-- Bible Tab Content -->
          <div id="bibleTab" class="tab-content active">
            <div class="bible-selector">
              <div class="form-row">
                <div class="form-group col-md-4">
                  <label>Book</label>
                  <select id="bibleBook" class="form-control" onchange="loadChapters()">
                    <option value="">Select Book...</option>
                  </select>
                </div>
                <div class="form-group col-md-4">
                  <label>Chapter</label>
                  <select id="bibleChapter" class="form-control" onchange="loadVerses()" disabled>
                    <option value="">Select Chapter...</option>
                  </select>
                </div>
                <div class="form-group col-md-4">
                  <label>Verse(s)</label>
                  <input type="text" id="bibleVerses" class="form-control" placeholder="e.g., 1 or 1-5" disabled>
                </div>
              </div>
              <div class="verse-preview" id="versePreview">
                <p class="text-muted">Select a passage to preview</p>
              </div>
            </div>
          </div>
          
          <!-- Prayer Tab Content -->
          <div id="prayerTab" class="tab-content" style="display: none;">
            <div class="search-bar">
              <input type="text" id="prayerSearch" class="form-control" placeholder="Search prayers..." 
                     onkeyup="searchContent('prayer')">
            </div>
            <div class="content-list" id="prayerList">
              <!-- Prayer items will be loaded here -->
            </div>
          </div>
          
          <!-- Hymn Tab Content -->
          <div id="hymnTab" class="tab-content" style="display: none;">
            <div class="search-bar">
              <input type="text" id="hymnSearch" class="form-control" placeholder="Search hymns..." 
                     onkeyup="searchContent('hymn')">
            </div>
            <div class="content-list" id="hymnList">
              <!-- Hymn items will be loaded here -->
            </div>
          </div>
          
          <!-- Creed Tab Content -->
          <div id="creedTab" class="tab-content" style="display: none;">
            <div class="content-list" id="creedList">
              <!-- Standard creeds will be loaded here -->
            </div>
          </div>
          
          <!-- Scripture Reading Tab (Extended passage) -->
          <div id="scripture_readingTab" class="tab-content" style="display: none;">
            <div class="form-group">
              <label>Scripture Passage Reference</label>
              <input type="text" id="scriptureReference" class="form-control" 
                     placeholder="e.g., Matthew 8:23-27">
            </div>
            <div class="form-group">
              <label>Context/Introduction</label>
              <textarea id="scriptureContext" class="form-control" rows="3"
                        placeholder="Brief context for this passage..."></textarea>
            </div>
            <div class="form-group">
              <label>Scripture Text</label>
              <textarea id="scriptureText" class="form-control" rows="6"
                        placeholder="Paste the full scripture text here..."></textarea>
            </div>
          </div>
          
          <!-- Artwork Tab -->
          <div id="artworkTab" class="tab-content" style="display: none;">
            <div class="form-group">
              <label>Artwork Title</label>
              <input type="text" id="artworkTitle" class="form-control" 
                     placeholder='e.g., "The Storm on the Sea of Galilee" by Rembrandt'>
            </div>
            <div class="form-group">
              <label>Image URL</label>
              <input type="url" id="artworkUrl" class="form-control" 
                     placeholder="https://example.com/image.jpg" onchange="previewArtwork()">
            </div>
            <div class="form-group">
              <label>Reflection on Artwork</label>
              <textarea id="artworkReflection" class="form-control" rows="4"
                        placeholder="How does this artwork connect to today's theme?"></textarea>
            </div>
            <div id="artworkPreview" class="media-preview"></div>
          </div>
          
          <!-- Video Tab -->
          <div id="videoTab" class="tab-content" style="display: none;">
            <div class="form-group">
              <label>Video Title</label>
              <input type="text" id="videoTitle" class="form-control" 
                     placeholder="e.g., 5-minute guided breathing prayer">
            </div>
            <div class="form-group">
              <label>Video URL (YouTube, Vimeo, etc.)</label>
              <input type="url" id="videoUrl" class="form-control" 
                     placeholder="https://youtube.com/watch?v=..." onchange="previewVideo()">
            </div>
            <div class="form-group">
              <label>Description</label>
              <textarea id="videoDescription" class="form-control" rows="3"
                        placeholder="Brief description of the video content..."></textarea>
            </div>
            <div id="videoPreview" class="media-preview"></div>
          </div>
          
          <!-- Journaling Prompt Tab -->
          <div id="journalingTab" class="tab-content" style="display: none;">
            <div class="form-group">
              <label>Journaling Theme</label>
              <input type="text" id="journalTheme" class="form-control" 
                     placeholder="e.g., Facing Life's Storms">
            </div>
            <div class="form-group">
              <label>Main Prompt</label>
              <textarea id="journalPrompt" class="form-control" rows="3"
                        placeholder='e.g., "What storms are you facing today?"'></textarea>
            </div>
            <div class="form-group">
              <label>Guiding Questions (optional)</label>
              <textarea id="journalQuestions" class="form-control" rows="4"
                        placeholder="Additional questions to guide reflection..."></textarea>
            </div>
          </div>
          
          <!-- Guided Prayer Tab -->
          <div id="guided_prayerTab" class="tab-content" style="display: none;">
            <div class="form-group">
              <label>Prayer Title</label>
              <input type="text" id="guidedPrayerTitle" class="form-control" 
                     placeholder="e.g., Evening Prayer for Peace">
            </div>
            <div class="form-group">
              <label>Type</label>
              <select id="guidedPrayerType" class="form-control">
                <option value="audio">Audio Recording</option>
                <option value="video">Video Guide</option>
                <option value="text">Written Prayer</option>
              </select>
            </div>
            <div class="form-group">
              <label>Media URL (if audio/video)</label>
              <input type="url" id="guidedPrayerUrl" class="form-control" 
                     placeholder="https://example.com/prayer.mp3">
            </div>
            <div class="form-group">
              <label>Prayer Text/Description</label>
              <textarea id="guidedPrayerText" class="form-control" rows="6"
                        placeholder="Traditional Presbyterian prayer for peace..."></textarea>
            </div>
          </div>
          
          <!-- Reflection Tab Content -->
          <div id="reflectionTab" class="tab-content" style="display: none;">
            <div class="form-group">
              <label>Reflection Title</label>
              <input type="text" id="reflectionTitle" class="form-control" placeholder="Enter title...">
            </div>
            <div class="form-group">
              <label>Reflection Content</label>
              <textarea id="reflectionContent" class="form-control" rows="6" 
                        placeholder="Write your reflection..."></textarea>
            </div>
          </div>
          
          <!-- Duration for all content types -->
          <div class="duration-section">
            <label>Estimated Duration (minutes)</label>
            <input type="number" id="contentDuration" class="form-control" min="1" value="5" style="width: 100px;">
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" onclick="closeContentPicker()">Cancel</button>
          <button type="button" class="btn btn-primary" onclick="saveSelectedContent()">Add to Day</button>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
.journey-editor {
  background: white;
  padding: 2rem;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.editor-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 2rem;
  padding-bottom: 1rem;
  border-bottom: 1px solid #e0e0e0;
}

.header-actions {
  display: flex;
  gap: 0.5rem;
}

.journey-settings {
  background: #f8f9fa;
  padding: 1.5rem;
  border-radius: 8px;
  margin-bottom: 2rem;
}

.days-section {
  margin-top: 2rem;
}

.section-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1.5rem;
}

.days-list {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.day-card {
  background: white;
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  padding: 1.5rem;
  transition: box-shadow 0.3s ease;
}

.day-card:hover {
  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.day-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
}

.day-number {
  background: #87CEEB;
  color: white;
  padding: 0.5rem 1rem;
  border-radius: 20px;
  font-weight: bold;
}

.day-actions {
  display: flex;
  gap: 0.5rem;
}

.day-title {
  font-size: 1.25rem;
  margin: 0 0 0.5rem 0;
}

.day-description {
  color: #666;
  margin-bottom: 1rem;
}

.day-contents {
  padding-top: 1rem;
  border-top: 1px solid #e0e0e0;
}

.content-count {
  color: #28a745;
  font-size: 0.9rem;
}

.no-content {
  color: #dc3545;
  font-size: 0.9rem;
}

.modal {
  position: fixed;
  z-index: 1000;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0,0,0,0.5);
  display: flex;
  align-items: center;
  justify-content: center;
}

.modal-dialog {
  width: 90%;
  max-width: 600px;
}

.modal-content {
  background: white;
  border-radius: 8px;
  box-shadow: 0 4px 20px rgba(0,0,0,0.2);
}

.modal-header {
  padding: 1.5rem;
  border-bottom: 1px solid #e0e0e0;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.modal-body {
  padding: 1.5rem;
  max-height: 60vh;
  overflow-y: auto;
}

.modal-footer {
  padding: 1rem 1.5rem;
  border-top: 1px solid #e0e0e0;
  display: flex;
  justify-content: flex-end;
  gap: 0.5rem;
}

.content-items {
  margin: 1rem 0;
  padding: 1rem;
  background: #f8f9fa;
  border-radius: 4px;
  min-height: 100px;
}

.content-item {
  background: white;
  padding: 0.75rem;
  margin-bottom: 0.5rem;
  border: 1px solid #e0e0e0;
  border-radius: 4px;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.close {
  background: none;
  border: none;
  font-size: 1.5rem;
  cursor: pointer;
  color: #666;
}

/* Content Picker Styles */
.modal-lg {
  max-width: 800px;
}

.content-tabs {
  display: flex;
  gap: 0.5rem;
  margin-bottom: 1.5rem;
  border-bottom: 2px solid #e0e0e0;
  padding-bottom: 0;
  flex-wrap: wrap;
}

.tab-btn {
  background: none;
  border: none;
  padding: 0.75rem 1rem;
  cursor: pointer;
  color: #666;
  font-size: 0.9rem;
  border-bottom: 3px solid transparent;
  transition: all 0.3s ease;
}

.tab-btn:hover {
  color: #333;
}

.tab-btn.active {
  color: #87CEEB;
  border-bottom-color: #87CEEB;
}

.tab-content {
  min-height: 300px;
}

.bible-selector .form-row {
  margin-bottom: 1rem;
}

.verse-preview {
  background: #f8f9fa;
  padding: 1rem;
  border-radius: 4px;
  max-height: 200px;
  overflow-y: auto;
}

.search-bar {
  margin-bottom: 1rem;
}

.content-list {
  max-height: 300px;
  overflow-y: auto;
  border: 1px solid #e0e0e0;
  border-radius: 4px;
  padding: 0.5rem;
}

.content-list-item {
  padding: 0.75rem;
  border: 1px solid #e0e0e0;
  border-radius: 4px;
  margin-bottom: 0.5rem;
  cursor: pointer;
  transition: all 0.3s ease;
}

.content-list-item:hover {
  background: #f8f9fa;
  border-color: #87CEEB;
}

.content-list-item.selected {
  background: #e3f2fd;
  border-color: #87CEEB;
}

.duration-section {
  margin-top: 1.5rem;
  padding-top: 1.5rem;
  border-top: 1px solid #e0e0e0;
}

.media-preview {
  margin-top: 1rem;
  padding: 1rem;
  background: #f8f9fa;
  border-radius: 4px;
  text-align: center;
  min-height: 100px;
}

.media-preview img {
  max-width: 100%;
  max-height: 300px;
  border-radius: 4px;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.media-preview iframe {
  width: 100%;
  height: 300px;
  border-radius: 4px;
}

.tab-btn {
  font-size: 0.85rem;
  padding: 0.5rem 0.75rem;
}

.tab-btn i {
  margin-right: 0.25rem;
}
</style>

<script>
let currentJourneyId = '<%= journey.id %>';
let journeyDays = <%- JSON.stringify(journeyDays) %>;

async function saveJourney() {
  const journeyData = {
    id: currentJourneyId,
    title: document.getElementById('journeyTitle').value,
    description: document.getElementById('journeyDescription').value,
    theme: document.getElementById('journeyTheme').value,
    is_published: document.getElementById('journeyStatus').value === 'true',
    duration_days: journeyDays.length
  };
  
  try {
    const response = await fetch('/admin/api/journeys', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(journeyData)
    });
    
    if (response.ok) {
      alert('Journey saved successfully!');
    } else {
      const error = await response.json();
      alert('Error: ' + (error.error || 'Failed to save journey'));
    }
  } catch (error) {
    console.error('Error saving journey:', error);
    alert('Failed to save journey');
  }
}

function addDay() {
  const newDayNumber = journeyDays.length + 1;
  const dayData = {
    dayNumber: newDayNumber,
    title: `Day ${newDayNumber}`,
    description: '',
    contents: []
  };
  
  saveDayToServer(dayData, true);
}

function editDay(dayId) {
  if (!dayId) {
    alert('Please save the journey first to edit days');
    return;
  }
  const day = journeyDays.find(d => d.id === dayId);
  if (!day) return;
  
  document.getElementById('modalDayId').value = dayId;
  document.getElementById('modalDayNumber').textContent = day.day_number;
  document.getElementById('modalDayTitle').value = day.title || '';
  document.getElementById('modalDayDescription').value = day.description || '';
  
  // Load contents
  const contentsDiv = document.getElementById('modalDayContents');
  if (day.contents && day.contents.length > 0) {
    contentsDiv.innerHTML = day.contents.map((content, index) => `
      <div class="content-item">
        <div>
          <strong>${content.type || content.content_type}</strong>: ${content.title}
          <span class="text-muted ml-2">${content.duration_minutes || 5} minutes</span>
        </div>
        <button class="btn btn-sm btn-danger" onclick="removeContentItem(${index})">
          <i class="fas fa-trash"></i>
        </button>
      </div>
    `).join('');
  } else {
    contentsDiv.innerHTML = '<p class="text-muted">No content items yet</p>';
  }
  
  document.getElementById('dayModal').style.display = 'flex';
}

function closeDayModal() {
  document.getElementById('dayModal').style.display = 'none';
}

async function saveDayChanges() {
  const dayId = document.getElementById('modalDayId').value;
  const day = journeyDays.find(d => d.id == dayId);
  
  // Update the day object with new values
  day.title = document.getElementById('modalDayTitle').value;
  day.description = document.getElementById('modalDayDescription').value;
  
  const dayData = {
    dayId: dayId,
    dayNumber: day.day_number,
    title: day.title,
    description: day.description,
    contents: day.contents || []
  };
  
  await saveDayToServer(dayData, false);
  closeDayModal();
}

async function saveDayToServer(dayData, isNew) {
  try {
    const response = await fetch(`/admin/api/journeys/${currentJourneyId}/days`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(dayData)
    });
    
    if (response.ok) {
      if (isNew) {
        alert('Day added successfully!');
      }
      window.location.reload();
    } else {
      const error = await response.json();
      alert('Error: ' + (error.error || 'Failed to save day'));
    }
  } catch (error) {
    console.error('Error saving day:', error);
    alert('Failed to save day');
  }
}

async function deleteDay(dayId, dayNumber) {
  if (!dayId) {
    alert('Cannot delete unsaved day. Please reload the page.');
    return;
  }
  if (!confirm(`Are you sure you want to delete Day ${dayNumber}?`)) {
    return;
  }
  
  try {
    const response = await fetch(`/admin/api/journeys/${currentJourneyId}/days/${dayId}`, {
      method: 'DELETE'
    });
    
    if (response.ok) {
      window.location.reload();
    } else {
      const error = await response.json();
      alert('Error: ' + (error.error || 'Failed to delete day'));
    }
  } catch (error) {
    console.error('Error deleting day:', error);
    alert('Failed to delete day');
  }
}

// Content picker variables
let currentDayForContent = null;
let selectedContent = null;
let currentContentTab = 'bible';

function addContentItem() {
  const dayId = document.getElementById('modalDayId').value;
  currentDayForContent = journeyDays.find(d => d.id === dayId);
  
  // Reset content picker
  selectedContent = null;
  document.getElementById('contentDuration').value = 5;
  
  // Load initial data
  loadBibleBooks();
  loadCreeds();
  
  // Show modal
  document.getElementById('contentPickerModal').style.display = 'flex';
}

function closeContentPicker() {
  document.getElementById('contentPickerModal').style.display = 'none';
  selectedContent = null;
}

function switchContentTab(tabName) {
  currentContentTab = tabName;
  
  // Update tab buttons
  document.querySelectorAll('.tab-btn').forEach(btn => {
    btn.classList.remove('active');
  });
  event.target.classList.add('active');
  
  // Hide all tab contents
  document.querySelectorAll('.tab-content').forEach(content => {
    content.style.display = 'none';
  });
  
  // Show selected tab
  document.getElementById(tabName + 'Tab').style.display = 'block';
  
  // Load content for the tab if needed
  if (tabName === 'prayer' || tabName === 'hymn') {
    searchContent(tabName);
  }
}

async function loadBibleBooks() {
  try {
    const response = await fetch('/admin/api/bible/books');
    const books = await response.json();
    
    const select = document.getElementById('bibleBook');
    select.innerHTML = '<option value="">Select Book...</option>';
    
    books.forEach(book => {
      const option = document.createElement('option');
      option.value = book.id;
      option.textContent = book.name;
      select.appendChild(option);
    });
  } catch (error) {
    console.error('Error loading Bible books:', error);
  }
}

async function loadChapters() {
  const bookId = document.getElementById('bibleBook').value;
  if (!bookId) return;
  
  try {
    const response = await fetch(`/admin/api/bible/chapters/${bookId}`);
    const data = await response.json();
    
    const select = document.getElementById('bibleChapter');
    select.innerHTML = '<option value="">Select Chapter...</option>';
    select.disabled = false;
    
    for (let i = 1; i <= data.chapterCount; i++) {
      const option = document.createElement('option');
      option.value = i;
      option.textContent = `Chapter ${i}`;
      select.appendChild(option);
    }
    
    // Reset verses
    document.getElementById('bibleVerses').value = '';
    document.getElementById('bibleVerses').disabled = true;
    document.getElementById('versePreview').innerHTML = '<p class="text-muted">Select a passage to preview</p>';
  } catch (error) {
    console.error('Error loading chapters:', error);
  }
}

async function loadVerses() {
  const bookId = document.getElementById('bibleBook').value;
  const chapter = document.getElementById('bibleChapter').value;
  if (!bookId || !chapter) return;
  
  document.getElementById('bibleVerses').disabled = false;
  document.getElementById('bibleVerses').focus();
  
  // Add event listener for verse input
  document.getElementById('bibleVerses').oninput = loadVersePreview;
}

async function loadVersePreview() {
  const bookId = document.getElementById('bibleBook').value;
  const chapter = document.getElementById('bibleChapter').value;
  const verseRange = document.getElementById('bibleVerses').value;
  
  if (!bookId || !chapter || !verseRange) return;
  
  try {
    const response = await fetch(`/admin/api/bible/verses/${bookId}/${chapter}?verses=${verseRange}`);
    const data = await response.json();
    
    if (data.verses && data.verses.length > 0) {
      const preview = document.getElementById('versePreview');
      preview.innerHTML = `
        <h5>${data.bookName} ${chapter}:${verseRange}</h5>
        <p>${data.verses.map(v => `<strong>${v.verse}.</strong> ${v.text}`).join(' ')}</p>
      `;
      
      // Store selected content
      selectedContent = {
        type: 'bible_verse',
        id: `${bookId}-${chapter}-${verseRange}`,
        title: `${data.bookName} ${chapter}:${verseRange}`,
        preview: data.verses[0].text.substring(0, 100) + '...'
      };
    }
  } catch (error) {
    console.error('Error loading verse preview:', error);
  }
}

async function searchContent(type) {
  const searchTerm = document.getElementById(type + 'Search')?.value || '';
  
  try {
    const response = await fetch(`/admin/api/content/search?type=${type}&q=${searchTerm}`);
    const items = await response.json();
    
    const listEl = document.getElementById(type + 'List');
    if (items.length === 0) {
      listEl.innerHTML = '<p class="text-muted text-center">No items found</p>';
      return;
    }
    
    listEl.innerHTML = items.map(item => `
      <div class="content-list-item" onclick="selectContent('${type}', '${item.id}', '${item.title}')">
        <h5>${item.title}</h5>
        <p class="text-muted mb-0">${item.preview || item.content?.substring(0, 100) + '...' || ''}</p>
      </div>
    `).join('');
  } catch (error) {
    console.error('Error searching content:', error);
  }
}

function selectContent(type, id, title) {
  // Update selection UI
  document.querySelectorAll('.content-list-item').forEach(item => {
    item.classList.remove('selected');
  });
  event.target.closest('.content-list-item').classList.add('selected');
  
  // Store selected content
  selectedContent = {
    type: type,
    id: id,
    title: title
  };
}

function loadCreeds() {
  const creeds = [
    { id: 'apostles', title: "Apostles' Creed" },
    { id: 'nicene', title: "Nicene Creed" },
    { id: 'athanasian', title: "Athanasian Creed" }
  ];
  
  const listEl = document.getElementById('creedList');
  listEl.innerHTML = creeds.map(creed => `
    <div class="content-list-item" onclick="selectContent('creed', '${creed.id}', '${creed.title}')">
      <h5>${creed.title}</h5>
    </div>
  `).join('');
}

function saveSelectedContent() {
  // Handle custom content types
  if (currentContentTab === 'reflection') {
    const title = document.getElementById('reflectionTitle').value;
    const content = document.getElementById('reflectionContent').value;
    
    if (!title || !content) {
      alert('Please enter both title and content for the reflection');
      return;
    }
    
    selectedContent = {
      type: 'reflection',
      id: 'custom',
      title: title,
      content: content
    };
  } else if (currentContentTab === 'scripture_reading') {
    const reference = document.getElementById('scriptureReference').value;
    const context = document.getElementById('scriptureContext').value;
    const text = document.getElementById('scriptureText').value;
    
    if (!reference || !text) {
      alert('Please enter scripture reference and text');
      return;
    }
    
    selectedContent = {
      type: 'scripture_reading',
      id: 'custom_' + Date.now(),
      title: reference,
      metadata: {
        reference: reference,
        context: context,
        text: text
      }
    };
  } else if (currentContentTab === 'artwork') {
    const title = document.getElementById('artworkTitle').value;
    const url = document.getElementById('artworkUrl').value;
    const reflection = document.getElementById('artworkReflection').value;
    
    if (!title || !url) {
      alert('Please enter artwork title and image URL');
      return;
    }
    
    selectedContent = {
      type: 'artwork',
      id: 'custom_' + Date.now(),
      title: title,
      metadata: {
        imageUrl: url,
        reflection: reflection
      }
    };
  } else if (currentContentTab === 'video') {
    const title = document.getElementById('videoTitle').value;
    const url = document.getElementById('videoUrl').value;
    const description = document.getElementById('videoDescription').value;
    
    if (!title || !url) {
      alert('Please enter video title and URL');
      return;
    }
    
    selectedContent = {
      type: 'video',
      id: 'custom_' + Date.now(),
      title: title,
      metadata: {
        videoUrl: url,
        embedUrl: getVideoEmbedUrl(url),
        description: description
      }
    };
  } else if (currentContentTab === 'journaling') {
    const theme = document.getElementById('journalTheme').value;
    const prompt = document.getElementById('journalPrompt').value;
    const questions = document.getElementById('journalQuestions').value;
    
    if (!theme || !prompt) {
      alert('Please enter journaling theme and main prompt');
      return;
    }
    
    selectedContent = {
      type: 'journaling_prompt',
      id: 'custom_' + Date.now(),
      title: theme,
      metadata: {
        prompt: prompt,
        questions: questions
      }
    };
  } else if (currentContentTab === 'guided_prayer') {
    const title = document.getElementById('guidedPrayerTitle').value;
    const type = document.getElementById('guidedPrayerType').value;
    const url = document.getElementById('guidedPrayerUrl').value;
    const text = document.getElementById('guidedPrayerText').value;
    
    if (!title || !text) {
      alert('Please enter prayer title and text');
      return;
    }
    
    selectedContent = {
      type: 'guided_prayer',
      id: 'custom_' + Date.now(),
      title: title,
      metadata: {
        prayerType: type,
        mediaUrl: url,
        text: text
      }
    };
  }
  
  if (!selectedContent) {
    alert('Please select or enter content to add');
    return;
  }
  
  // Add content to current day
  const duration = document.getElementById('contentDuration').value;
  const contentItem = {
    ...selectedContent,
    duration_minutes: parseInt(duration),
    order_index: currentDayForContent.contents ? currentDayForContent.contents.length : 0
  };
  
  if (!currentDayForContent.contents) {
    currentDayForContent.contents = [];
  }
  currentDayForContent.contents.push(contentItem);
  
  // Refresh the day modal content display
  editDay(currentDayForContent.id);
  
  // Close content picker
  closeContentPicker();
}

function removeContentItem(index) {
  const dayId = document.getElementById('modalDayId').value;
  const day = journeyDays.find(d => d.id === dayId);
  
  if (day && day.contents) {
    day.contents.splice(index, 1);
    // Refresh display
    editDay(dayId);
  }
}

// Preview functions
function previewArtwork() {
  const url = document.getElementById('artworkUrl').value;
  const preview = document.getElementById('artworkPreview');
  
  if (url) {
    preview.innerHTML = `<img src="${url}" alt="Artwork preview" onerror="this.src='data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%22200%22 height=%22200%22%3E%3Crect width=%22200%22 height=%22200%22 fill=%22%23ddd%22/%3E%3Ctext x=%2250%25%22 y=%2250%25%22 text-anchor=%22middle%22 dy=%22.3em%22 fill=%22%23999%22%3EImage not found%3C/text%3E%3C/svg%3E'">`;
  } else {
    preview.innerHTML = '';
  }
}

function previewVideo() {
  const url = document.getElementById('videoUrl').value;
  const preview = document.getElementById('videoPreview');
  
  if (url) {
    const embedUrl = getVideoEmbedUrl(url);
    if (embedUrl) {
      preview.innerHTML = `<iframe src="${embedUrl}" frameborder="0" allowfullscreen></iframe>`;
    } else {
      preview.innerHTML = '<p class="text-muted">Video preview not available. URL will be saved.</p>';
    }
  } else {
    preview.innerHTML = '';
  }
}

function getVideoEmbedUrl(url) {
  // YouTube
  const youtubeMatch = url.match(/(?:youtube\.com\/watch\?v=|youtu\.be\/)([^&\n?#]+)/);
  if (youtubeMatch) {
    return `https://www.youtube.com/embed/${youtubeMatch[1]}`;
  }
  
  // Vimeo
  const vimeoMatch = url.match(/vimeo\.com\/(\d+)/);
  if (vimeoMatch) {
    return `https://player.vimeo.com/video/${vimeoMatch[1]}`;
  }
  
  return null;
}

// Close modal when clicking outside
window.onclick = function(event) {
  if (event.target == document.getElementById('dayModal')) {
    closeDayModal();
  }
  if (event.target == document.getElementById('contentPickerModal')) {
    closeContentPicker();
  }
}
</script>