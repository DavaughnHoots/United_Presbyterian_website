<div class="max-w-7xl mx-auto">
    <!-- Users Header -->
    <div class="mb-8 flex justify-between items-center">
        <div>
            <h1 class="text-3xl font-bold mb-2" style="color: var(--text-primary);">User Management</h1>
            <p class="text-gray-600">Manage church members and administrators</p>
        </div>
        <div class="flex space-x-3">
            <button onclick="showImportModal()" class="btn-secondary">
                <i class="fas fa-file-import mr-2"></i>Import CSV
            </button>
            <button onclick="exportUsers()" class="btn-secondary">
                <i class="fas fa-download mr-2"></i>Export Users
            </button>
            <button onclick="showCreateUserModal()" class="btn-primary">
                <i class="fas fa-user-plus mr-2"></i>New User
            </button>
        </div>
    </div>
    
    <!-- Stats Cards -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
        <div class="module-card bg-blue-50">
            <div class="text-2xl font-bold text-blue-700"><%= stats.total %></div>
            <div class="text-sm text-blue-600">Total Users</div>
        </div>
        <div class="module-card bg-green-50">
            <div class="text-2xl font-bold text-green-700"><%= stats.active %></div>
            <div class="text-sm text-green-600">Active Users</div>
        </div>
        <div class="module-card bg-purple-50">
            <div class="text-2xl font-bold text-purple-700"><%= stats.admins %></div>
            <div class="text-sm text-purple-600">Administrators</div>
        </div>
        <div class="module-card bg-yellow-50">
            <div class="text-2xl font-bold text-yellow-700"><%= stats.thisMonth %></div>
            <div class="text-sm text-yellow-600">New This Month</div>
        </div>
    </div>
    
    <!-- Advanced Filters -->
    <div class="module-card mb-6">
        <div class="flex items-center justify-between mb-4">
            <h3 class="font-semibold">Filters</h3>
            <button onclick="resetFilters()" class="text-sm text-blue-600 hover:underline">Reset All</button>
        </div>
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div>
                <label class="block text-sm font-medium mb-2">Search</label>
                <input type="text" id="searchInput" placeholder="Name, email, or phone..." 
                       onkeyup="filterUsers()" class="w-full px-3 py-2 border rounded-lg">
            </div>
            <div>
                <label class="block text-sm font-medium mb-2">Status</label>
                <select id="statusFilter" onchange="filterUsers()" class="w-full px-3 py-2 border rounded-lg">
                    <option value="">All Users</option>
                    <option value="active">Active Only</option>
                    <option value="inactive">Inactive Only</option>
                    <option value="admin">Admins Only</option>
                    <option value="new">New Users (< 30 days)</option>
                </select>
            </div>
            <div>
                <label class="block text-sm font-medium mb-2">Last Active</label>
                <select id="activityFilter" onchange="filterUsers()" class="w-full px-3 py-2 border rounded-lg">
                    <option value="">Any Time</option>
                    <option value="today">Today</option>
                    <option value="week">This Week</option>
                    <option value="month">This Month</option>
                    <option value="inactive">Never</option>
                </select>
            </div>
            <div>
                <label class="block text-sm font-medium mb-2">Date Range</label>
                <input type="date" id="dateFrom" onchange="filterUsers()" 
                       class="w-full px-3 py-2 border rounded-lg" placeholder="From">
            </div>
        </div>
    </div>
    
    <!-- Bulk Actions Bar -->
    <div id="bulkActionsBar" class="module-card mb-4 bg-blue-50 hidden">
        <div class="flex items-center justify-between">
            <div class="flex items-center space-x-4">
                <span class="font-medium"><span id="selectedCount">0</span> users selected</span>
                <button onclick="selectAll()" class="text-sm text-blue-600 hover:underline">Select All</button>
                <button onclick="deselectAll()" class="text-sm text-blue-600 hover:underline">Deselect All</button>
            </div>
            <div class="flex space-x-2">
                <button onclick="bulkEmail()" class="btn-secondary btn-sm">
                    <i class="fas fa-envelope mr-1"></i>Email
                </button>
                <button onclick="bulkActivate()" class="btn-secondary btn-sm">
                    <i class="fas fa-check mr-1"></i>Activate
                </button>
                <button onclick="bulkDeactivate()" class="btn-secondary btn-sm">
                    <i class="fas fa-ban mr-1"></i>Deactivate
                </button>
                <button onclick="bulkDelete()" class="btn-danger btn-sm">
                    <i class="fas fa-trash mr-1"></i>Delete
                </button>
            </div>
        </div>
    </div>
    
    <!-- Users Table -->
    <div class="module-card overflow-hidden">
        <div class="overflow-x-auto">
            <table class="w-full">
                <thead class="bg-gray-50 border-b">
                    <tr>
                        <th class="text-center px-4 py-3">
                            <input type="checkbox" id="selectAllCheckbox" onchange="toggleSelectAll()">
                        </th>
                        <th class="text-left px-4 py-3 font-medium text-gray-700">User</th>
                        <th class="text-left px-4 py-3 font-medium text-gray-700">Contact</th>
                        <th class="text-center px-4 py-3 font-medium text-gray-700">Status</th>
                        <th class="text-center px-4 py-3 font-medium text-gray-700">Activity</th>
                        <th class="text-left px-4 py-3 font-medium text-gray-700">Joined</th>
                        <th class="text-center px-4 py-3 font-medium text-gray-700">Actions</th>
                    </tr>
                </thead>
                <tbody id="usersTableBody">
                    <% if (users && users.length > 0) { %>
                        <% users.forEach(user => { %>
                            <tr class="border-b hover:bg-gray-50 user-row" 
                                data-id="<%= user.id %>"
                                data-name="<%= user.firstName %> <%= user.lastName %>"
                                data-email="<%= user.email %>"
                                data-status="<%= user.isActive ? 'active' : 'inactive' %>"
                                data-admin="<%= user.isAdmin %>"
                                data-joined="<%= user.createdAt %>"
                                data-lastactive="<%= user.lastActiveDate || '' %>">
                                <td class="px-4 py-3 text-center">
                                    <input type="checkbox" class="user-checkbox" value="<%= user.id %>" onchange="updateBulkActions()">
                                </td>
                                <td class="px-4 py-3">
                                    <div class="flex items-center">
                                        <div class="w-10 h-10 bg-sky-100 rounded-full flex items-center justify-center mr-3">
                                            <span class="text-sky-700 font-semibold">
                                                <%= user.firstName.charAt(0) %><%= user.lastName.charAt(0) %>
                                            </span>
                                        </div>
                                        <div>
                                            <div class="font-medium">
                                                <%= user.firstName %> <%= user.lastName %>
                                                <% if (user.isAdmin) { %>
                                                    <span class="ml-2 px-2 py-1 bg-purple-100 text-purple-700 text-xs rounded">Admin</span>
                                                <% } %>
                                            </div>
                                            <div class="text-xs text-gray-500">ID: <%= user.id.slice(0, 8) %>...</div>
                                        </div>
                                    </div>
                                </td>
                                <td class="px-4 py-3">
                                    <div class="space-y-1">
                                        <a href="mailto:<%= user.email %>" class="text-blue-600 hover:underline text-sm block">
                                            <%= user.email %>
                                        </a>
                                        <% if (user.personalEmail) { %>
                                            <a href="mailto:<%= user.personalEmail %>" class="text-gray-500 hover:underline text-xs block">
                                                <%= user.personalEmail %>
                                            </a>
                                        <% } %>
                                    </div>
                                </td>
                                <td class="px-4 py-3 text-center">
                                    <% if (user.isActive) { %>
                                        <span class="px-2 py-1 bg-green-100 text-green-700 text-xs rounded-full">Active</span>
                                    <% } else { %>
                                        <span class="px-2 py-1 bg-gray-100 text-gray-700 text-xs rounded-full">Inactive</span>
                                    <% } %>
                                </td>
                                <td class="px-4 py-3 text-center">
                                    <div class="text-sm">
                                        <div class="font-medium">
                                            <i class="fas fa-fire text-orange-500"></i> <%= user.currentStreak %> days
                                        </div>
                                        <div class="text-xs text-gray-500">
                                            <% if (user.lastActiveDate) { %>
                                                Last: <%= new Date(user.lastActiveDate).toLocaleDateString() %>
                                            <% } else { %>
                                                Never active
                                            <% } %>
                                        </div>
                                    </div>
                                </td>
                                <td class="px-4 py-3 text-sm text-gray-600">
                                    <%= new Date(user.createdAt).toLocaleDateString() %>
                                </td>
                                <td class="px-4 py-3">
                                    <div class="flex justify-center space-x-1">
                                        <button onclick="viewUser('<%= user.id %>')" 
                                                class="text-blue-600 hover:bg-blue-50 p-2 rounded" title="View Details">
                                            <i class="fas fa-eye"></i>
                                        </button>
                                        <button onclick="emailUser('<%= user.id %>')" 
                                                class="text-green-600 hover:bg-green-50 p-2 rounded" title="Send Email">
                                            <i class="fas fa-envelope"></i>
                                        </button>
                                        <% if (!user.isAdmin || (user.isAdmin && user.id !== currentUserId)) { %>
                                            <button onclick="toggleAdmin('<%= user.id %>', <%= user.isAdmin %>)" 
                                                    class="<%= user.isAdmin ? 'text-yellow-600 hover:bg-yellow-50' : 'text-purple-600 hover:bg-purple-50' %> p-2 rounded" 
                                                    title="<%= user.isAdmin ? 'Remove Admin' : 'Make Admin' %>">
                                                <i class="fas <%= user.isAdmin ? 'fa-user-times' : 'fa-user-shield' %>"></i>
                                            </button>
                                        <% } %>
                                        <button onclick="toggleUserStatus('<%= user.id %>', <%= user.isActive %>)" 
                                                class="<%= user.isActive ? 'text-red-600 hover:bg-red-50' : 'text-green-600 hover:bg-green-50' %> p-2 rounded" 
                                                title="<%= user.isActive ? 'Deactivate' : 'Activate' %>">
                                            <i class="fas <%= user.isActive ? 'fa-ban' : 'fa-check-circle' %>"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        <% }) %>
                    <% } else { %>
                        <tr>
                            <td colspan="7" class="text-center py-8 text-gray-500">
                                No users found
                            </td>
                        </tr>
                    <% } %>
                </tbody>
            </table>
        </div>
        
        <!-- Pagination -->
        <div class="px-4 py-3 bg-gray-50 border-t flex items-center justify-between">
            <div class="text-sm text-gray-700">
                Showing <span id="showingStart">1</span> to <span id="showingEnd"><%= Math.min(25, users.length) %></span> 
                of <span id="totalUsers"><%= users.length %></span> users
            </div>
            <div class="flex items-center space-x-2">
                <select id="perPage" onchange="updatePagination()" class="px-3 py-1 border rounded text-sm">
                    <option value="10">10 per page</option>
                    <option value="25" selected>25 per page</option>
                    <option value="50">50 per page</option>
                    <option value="100">100 per page</option>
                </select>
                <button onclick="previousPage()" class="px-3 py-1 border rounded hover:bg-gray-100" id="prevBtn">
                    <i class="fas fa-chevron-left"></i>
                </button>
                <span class="px-3 py-1">Page <span id="currentPage">1</span> of <span id="totalPages">1</span></span>
                <button onclick="nextPage()" class="px-3 py-1 border rounded hover:bg-gray-100" id="nextBtn">
                    <i class="fas fa-chevron-right"></i>
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Create User Modal -->
<div id="createUserModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white rounded-lg max-w-lg w-full">
            <div class="p-6">
                <div class="flex justify-between items-center mb-6">
                    <h2 class="text-2xl font-bold">Create New User</h2>
                    <button onclick="closeCreateUserModal()" class="text-gray-500 hover:text-gray-700">
                        <i class="fas fa-times text-xl"></i>
                    </button>
                </div>
                
                <form id="createUserForm" onsubmit="createUser(event)">
                    <div class="space-y-4">
                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium mb-2">First Name*</label>
                                <input type="text" name="firstName" required 
                                       class="w-full px-3 py-2 border rounded-lg">
                            </div>
                            <div>
                                <label class="block text-sm font-medium mb-2">Last Name*</label>
                                <input type="text" name="lastName" required 
                                       class="w-full px-3 py-2 border rounded-lg">
                            </div>
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium mb-2">Church Email*</label>
                            <div class="flex">
                                <input type="text" name="emailPrefix" required 
                                       class="flex-1 px-3 py-2 border rounded-l-lg" placeholder="username">
                                <span class="px-3 py-2 bg-gray-100 border-t border-b border-r rounded-r-lg">@upc.com</span>
                            </div>
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium mb-2">Personal Email</label>
                            <input type="email" name="personalEmail" 
                                   class="w-full px-3 py-2 border rounded-lg">
                        </div>
                        
                        <div class="space-y-2">
                            <label class="flex items-center">
                                <input type="checkbox" name="isActive" checked class="mr-2">
                                <span>Account is active</span>
                            </label>
                            <label class="flex items-center">
                                <input type="checkbox" name="isAdmin" class="mr-2">
                                <span>Grant admin privileges</span>
                            </label>
                            <label class="flex items-center">
                                <input type="checkbox" name="sendWelcome" checked class="mr-2">
                                <span>Send welcome email</span>
                            </label>
                        </div>
                    </div>
                    
                    <div class="mt-6 flex justify-end space-x-3">
                        <button type="button" onclick="closeCreateUserModal()" class="btn-secondary">Cancel</button>
                        <button type="submit" class="btn-primary">
                            <i class="fas fa-user-plus mr-2"></i>Create User
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Enhanced User Details Modal -->
<div id="userModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto">
            <div class="p-6">
                <div class="flex justify-between items-center mb-6">
                    <h2 class="text-2xl font-bold">User Details</h2>
                    <button onclick="closeUserModal()" class="text-gray-500 hover:text-gray-700">
                        <i class="fas fa-times text-xl"></i>
                    </button>
                </div>
                <div id="userDetails">
                    <!-- User details will be loaded here -->
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Email Modal -->
<div id="emailModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white rounded-lg max-w-2xl w-full">
            <div class="p-6">
                <div class="flex justify-between items-center mb-6">
                    <h2 class="text-2xl font-bold">Send Email</h2>
                    <button onclick="closeEmailModal()" class="text-gray-500 hover:text-gray-700">
                        <i class="fas fa-times text-xl"></i>
                    </button>
                </div>
                
                <form id="emailForm" onsubmit="sendEmail(event)">
                    <div class="space-y-4">
                        <div>
                            <label class="block text-sm font-medium mb-2">To</label>
                            <div id="emailRecipients" class="flex flex-wrap gap-2 p-2 border rounded-lg bg-gray-50 min-h-[50px]">
                                <!-- Recipients will be shown here -->
                            </div>
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium mb-2">Subject*</label>
                            <input type="text" name="subject" required 
                                   class="w-full px-3 py-2 border rounded-lg">
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium mb-2">Message*</label>
                            <textarea name="message" rows="6" required 
                                      class="w-full px-3 py-2 border rounded-lg"></textarea>
                        </div>
                        
                        <div>
                            <label class="flex items-center">
                                <input type="checkbox" name="includePersonalEmail" checked class="mr-2">
                                <span>Also send to personal emails (if available)</span>
                            </label>
                        </div>
                    </div>
                    
                    <div class="mt-6 flex justify-end space-x-3">
                        <button type="button" onclick="closeEmailModal()" class="btn-secondary">Cancel</button>
                        <button type="submit" class="btn-primary">
                            <i class="fas fa-paper-plane mr-2"></i>Send Email
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Import Modal -->
<div id="importModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white rounded-lg max-w-lg w-full">
            <div class="p-6">
                <div class="flex justify-between items-center mb-6">
                    <h2 class="text-2xl font-bold">Import Users from CSV</h2>
                    <button onclick="closeImportModal()" class="text-gray-500 hover:text-gray-700">
                        <i class="fas fa-times text-xl"></i>
                    </button>
                </div>
                
                <div class="space-y-4">
                    <div class="bg-blue-50 p-4 rounded-lg">
                        <h4 class="font-medium mb-2">CSV Format Required:</h4>
                        <p class="text-sm text-gray-700 mb-2">
                            Your CSV file should have the following columns:
                        </p>
                        <code class="block text-xs bg-white p-2 rounded">
                            firstName,lastName,email,personalEmail,isAdmin,isActive
                        </code>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium mb-2">Select CSV File</label>
                        <input type="file" id="csvFile" accept=".csv" 
                               class="w-full px-3 py-2 border rounded-lg">
                    </div>
                    
                    <div>
                        <label class="flex items-center">
                            <input type="checkbox" id="importSendWelcome" checked class="mr-2">
                            <span>Send welcome emails to new users</span>
                        </label>
                    </div>
                </div>
                
                <div class="mt-6 flex justify-end space-x-3">
                    <button onclick="closeImportModal()" class="btn-secondary">Cancel</button>
                    <button onclick="importUsers()" class="btn-primary">
                        <i class="fas fa-file-import mr-2"></i>Import Users
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
.btn-sm {
    @apply px-3 py-1 text-sm;
}
.btn-danger {
    @apply px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition;
}
</style>

<script>
let allUsers = [];
let selectedUsers = new Set();
let currentPageNum = 1;
let itemsPerPage = 25;
let emailRecipients = [];

// Store users data
<% if (users) { %>
    allUsers = <%- JSON.stringify(users) %>;
<% } %>

// Enhanced filtering with date ranges and activity
function filterUsers() {
    const search = document.getElementById('searchInput').value.toLowerCase();
    const status = document.getElementById('statusFilter').value;
    const activity = document.getElementById('activityFilter').value;
    const dateFrom = document.getElementById('dateFrom').value;
    
    const rows = document.querySelectorAll('.user-row');
    let visibleCount = 0;
    
    rows.forEach(row => {
        const name = row.dataset.name.toLowerCase();
        const email = row.dataset.email.toLowerCase();
        const userStatus = row.dataset.status;
        const isAdmin = row.dataset.admin === 'true';
        const joinedDate = new Date(row.dataset.joined);
        const lastActive = row.dataset.lastactive ? new Date(row.dataset.lastactive) : null;
        
        let show = true;
        
        // Search filter
        if (search && !name.includes(search) && !email.includes(search)) show = false;
        
        // Status filter
        if (status === 'active' && userStatus !== 'active') show = false;
        if (status === 'inactive' && userStatus !== 'inactive') show = false;
        if (status === 'admin' && !isAdmin) show = false;
        if (status === 'new') {
            const thirtyDaysAgo = new Date();
            thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
            if (joinedDate < thirtyDaysAgo) show = false;
        }
        
        // Activity filter
        const now = new Date();
        if (activity === 'today' && (!lastActive || !isSameDay(lastActive, now))) show = false;
        if (activity === 'week' && (!lastActive || !isThisWeek(lastActive))) show = false;
        if (activity === 'month' && (!lastActive || !isThisMonth(lastActive))) show = false;
        if (activity === 'inactive' && lastActive) show = false;
        
        // Date filter
        if (dateFrom && joinedDate < new Date(dateFrom)) show = false;
        
        row.style.display = show ? '' : 'none';
        if (show) visibleCount++;
    });
    
    updatePagination();
}

// Helper functions for date comparison
function isSameDay(date1, date2) {
    return date1.toDateString() === date2.toDateString();
}

function isThisWeek(date) {
    const now = new Date();
    const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
    return date >= weekAgo;
}

function isThisMonth(date) {
    const now = new Date();
    return date.getMonth() === now.getMonth() && date.getFullYear() === now.getFullYear();
}

// Bulk actions
function toggleSelectAll() {
    const checkbox = document.getElementById('selectAllCheckbox');
    const checkboxes = document.querySelectorAll('.user-checkbox');
    
    checkboxes.forEach(cb => {
        cb.checked = checkbox.checked;
        if (checkbox.checked) {
            selectedUsers.add(cb.value);
        } else {
            selectedUsers.delete(cb.value);
        }
    });
    
    updateBulkActions();
}

function updateBulkActions() {
    const checkboxes = document.querySelectorAll('.user-checkbox:checked');
    selectedUsers.clear();
    
    checkboxes.forEach(cb => selectedUsers.add(cb.value));
    
    const bulkBar = document.getElementById('bulkActionsBar');
    const selectedCount = document.getElementById('selectedCount');
    
    if (selectedUsers.size > 0) {
        bulkBar.classList.remove('hidden');
        selectedCount.textContent = selectedUsers.size;
    } else {
        bulkBar.classList.add('hidden');
    }
}

function selectAll() {
    document.querySelectorAll('.user-checkbox').forEach(cb => {
        cb.checked = true;
        selectedUsers.add(cb.value);
    });
    updateBulkActions();
}

function deselectAll() {
    document.querySelectorAll('.user-checkbox').forEach(cb => {
        cb.checked = false;
    });
    selectedUsers.clear();
    updateBulkActions();
}

// Bulk email
async function bulkEmail() {
    if (selectedUsers.size === 0) return;
    
    emailRecipients = Array.from(selectedUsers).map(userId => {
        const user = allUsers.find(u => u.id === userId);
        return user;
    }).filter(u => u);
    
    showEmailModal();
}

// Bulk activate/deactivate
async function bulkActivate() {
    if (!confirm(`Activate ${selectedUsers.size} users?`)) return;
    
    try {
        const response = await fetch('/admin/api/users/bulk-activate', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ userIds: Array.from(selectedUsers) })
        });
        
        if (response.ok) {
            location.reload();
        } else {
            alert('Failed to activate users');
        }
    } catch (error) {
        alert('Error: ' + error.message);
    }
}

async function bulkDeactivate() {
    if (!confirm(`Deactivate ${selectedUsers.size} users?`)) return;
    
    try {
        const response = await fetch('/admin/api/users/bulk-deactivate', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ userIds: Array.from(selectedUsers) })
        });
        
        if (response.ok) {
            location.reload();
        } else {
            alert('Failed to deactivate users');
        }
    } catch (error) {
        alert('Error: ' + error.message);
    }
}

async function bulkDelete() {
    if (!confirm(`Are you sure you want to DELETE ${selectedUsers.size} users? This action cannot be undone!`)) return;
    
    try {
        const response = await fetch('/admin/api/users/bulk-delete', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ userIds: Array.from(selectedUsers) })
        });
        
        if (response.ok) {
            location.reload();
        } else {
            alert('Failed to delete users');
        }
    } catch (error) {
        alert('Error: ' + error.message);
    }
}

// Create user
function showCreateUserModal() {
    document.getElementById('createUserModal').classList.remove('hidden');
}

function closeCreateUserModal() {
    document.getElementById('createUserModal').classList.add('hidden');
    document.getElementById('createUserForm').reset();
}

async function createUser(e) {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    const userData = {
        firstName: formData.get('firstName'),
        lastName: formData.get('lastName'),
        email: formData.get('emailPrefix') + '@upc.com',
        personalEmail: formData.get('personalEmail'),
        isActive: !!formData.get('isActive'),
        isAdmin: !!formData.get('isAdmin'),
        sendWelcome: !!formData.get('sendWelcome')
    };
    
    try {
        const response = await fetch('/admin/api/users', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(userData)
        });
        
        if (response.ok) {
            location.reload();
        } else {
            const error = await response.json();
            alert('Error creating user: ' + (error.message || 'Unknown error'));
        }
    } catch (error) {
        alert('Error: ' + error.message);
    }
}

// Enhanced user details
async function viewUser(userId) {
    const user = allUsers.find(u => u.id === userId);
    if (!user) return;
    
    try {
        // Fetch activity logs
        const response = await fetch(`/admin/api/users/${userId}/activity`);
        const activity = await response.json();
        
        const details = `
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <!-- User Info -->
                <div class="lg:col-span-2 space-y-6">
                    <div class="bg-gray-50 p-4 rounded-lg">
                        <h3 class="font-semibold mb-4">Personal Information</h3>
                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <label class="text-sm font-medium text-gray-600">Name</label>
                                <p class="font-medium">${user.firstName} ${user.lastName}</p>
                            </div>
                            <div>
                                <label class="text-sm font-medium text-gray-600">User ID</label>
                                <p class="font-mono text-sm">${user.id}</p>
                            </div>
                            <div>
                                <label class="text-sm font-medium text-gray-600">Church Email</label>
                                <p class="font-medium">${user.email}</p>
                            </div>
                            <div>
                                <label class="text-sm font-medium text-gray-600">Personal Email</label>
                                <p class="font-medium">${user.personalEmail || 'Not provided'}</p>
                            </div>
                            <div>
                                <label class="text-sm font-medium text-gray-600">Status</label>
                                <p class="font-medium">
                                    ${user.isActive ? '<span class="text-green-600">Active</span>' : '<span class="text-red-600">Inactive</span>'}
                                    ${user.isAdmin ? '<span class="ml-2 text-purple-600">(Admin)</span>' : ''}
                                </p>
                            </div>
                            <div>
                                <label class="text-sm font-medium text-gray-600">Joined</label>
                                <p class="font-medium">${new Date(user.createdAt).toLocaleDateString()}</p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="bg-gray-50 p-4 rounded-lg">
                        <h3 class="font-semibold mb-4">Activity & Engagement</h3>
                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <label class="text-sm font-medium text-gray-600">Current Streak</label>
                                <p class="font-medium text-2xl">${user.currentStreak} days</p>
                            </div>
                            <div>
                                <label class="text-sm font-medium text-gray-600">Longest Streak</label>
                                <p class="font-medium text-2xl">${user.longestStreak} days</p>
                            </div>
                            <div>
                                <label class="text-sm font-medium text-gray-600">Last Active</label>
                                <p class="font-medium">${user.lastActiveDate ? new Date(user.lastActiveDate).toLocaleString() : 'Never'}</p>
                            </div>
                            <div>
                                <label class="text-sm font-medium text-gray-600">Total Logins</label>
                                <p class="font-medium">${activity.totalLogins || 0}</p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="bg-gray-50 p-4 rounded-lg">
                        <h3 class="font-semibold mb-4">Preferences</h3>
                        <div class="space-y-2">
                            <p class="text-sm">
                                <i class="fas ${user.preferences?.emailNotifications ? 'fa-check text-green-600' : 'fa-times text-red-600'} mr-2"></i>
                                Email notifications
                            </p>
                            <p class="text-sm">
                                <i class="fas ${user.preferences?.dailyReminder ? 'fa-check text-green-600' : 'fa-times text-red-600'} mr-2"></i>
                                Daily reminder (${user.preferences?.reminderTime || '08:00'})
                            </p>
                        </div>
                    </div>
                </div>
                
                <!-- Activity Timeline -->
                <div class="space-y-4">
                    <h3 class="font-semibold">Recent Activity</h3>
                    <div class="space-y-2 max-h-96 overflow-y-auto">
                        ${activity.logs && activity.logs.length > 0 ? activity.logs.map(log => `
                            <div class="bg-gray-50 p-3 rounded-lg text-sm">
                                <div class="flex items-center justify-between mb-1">
                                    <span class="font-medium">${log.action}</span>
                                    <span class="text-xs text-gray-500">${new Date(log.createdAt).toLocaleDateString()}</span>
                                </div>
                                <p class="text-xs text-gray-600">${log.details || ''}</p>
                            </div>
                        `).join('') : '<p class="text-gray-500 text-center py-8">No activity logged</p>'}
                    </div>
                </div>
            </div>
            
            <div class="mt-6 flex justify-end space-x-3">
                <button onclick="emailUser('${user.id}')" class="btn-secondary">
                    <i class="fas fa-envelope mr-2"></i>Send Email
                </button>
                <button onclick="closeUserModal()" class="btn-primary">Close</button>
            </div>
        `;
        
        document.getElementById('userDetails').innerHTML = details;
        document.getElementById('userModal').classList.remove('hidden');
    } catch (error) {
        console.error('Error fetching user activity:', error);
    }
}

function closeUserModal() {
    document.getElementById('userModal').classList.add('hidden');
}

// Email functionality
function emailUser(userId) {
    const user = allUsers.find(u => u.id === userId);
    if (!user) return;
    
    emailRecipients = [user];
    showEmailModal();
}

function showEmailModal() {
    const recipientsDiv = document.getElementById('emailRecipients');
    recipientsDiv.innerHTML = emailRecipients.map(user => `
        <span class="px-3 py-1 bg-blue-100 text-blue-700 rounded-full text-sm">
            ${user.firstName} ${user.lastName}
        </span>
    `).join('');
    
    document.getElementById('emailModal').classList.remove('hidden');
}

function closeEmailModal() {
    document.getElementById('emailModal').classList.add('hidden');
    document.getElementById('emailForm').reset();
    emailRecipients = [];
}

async function sendEmail(e) {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    const emailData = {
        recipients: emailRecipients.map(u => u.id),
        subject: formData.get('subject'),
        message: formData.get('message'),
        includePersonalEmail: !!formData.get('includePersonalEmail')
    };
    
    try {
        const response = await fetch('/admin/api/users/email', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(emailData)
        });
        
        if (response.ok) {
            alert('Emails sent successfully!');
            closeEmailModal();
        } else {
            alert('Failed to send emails');
        }
    } catch (error) {
        alert('Error: ' + error.message);
    }
}

// Import functionality
function showImportModal() {
    document.getElementById('importModal').classList.remove('hidden');
}

function closeImportModal() {
    document.getElementById('importModal').classList.add('hidden');
    document.getElementById('csvFile').value = '';
}

async function importUsers() {
    const fileInput = document.getElementById('csvFile');
    const file = fileInput.files[0];
    
    if (!file) {
        alert('Please select a CSV file');
        return;
    }
    
    const formData = new FormData();
    formData.append('file', file);
    formData.append('sendWelcome', document.getElementById('importSendWelcome').checked);
    
    try {
        const response = await fetch('/admin/api/users/import', {
            method: 'POST',
            body: formData
        });
        
        if (response.ok) {
            const result = await response.json();
            alert(`Successfully imported ${result.imported} users!`);
            location.reload();
        } else {
            const error = await response.json();
            alert('Import failed: ' + (error.message || 'Unknown error'));
        }
    } catch (error) {
        alert('Error: ' + error.message);
    }
}

// Reset filters
function resetFilters() {
    document.getElementById('searchInput').value = '';
    document.getElementById('statusFilter').value = '';
    document.getElementById('activityFilter').value = '';
    document.getElementById('dateFrom').value = '';
    filterUsers();
}

// Export users
async function exportUsers() {
    try {
        const response = await fetch('/admin/api/users/export');
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `users_${new Date().toISOString().split('T')[0]}.csv`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
    } catch (error) {
        alert('Error exporting users: ' + error.message);
    }
}

// Existing functions...
async function toggleAdmin(userId, isCurrentlyAdmin) {
    const action = isCurrentlyAdmin ? 'remove admin privileges from' : 'make';
    if (!confirm(`Are you sure you want to ${action} this user ${isCurrentlyAdmin ? '' : 'an admin'}?`)) {
        return;
    }
    
    try {
        const response = await fetch(`/admin/api/users/${userId}/toggle-admin`, {
            method: 'PUT'
        });
        
        if (response.ok) {
            location.reload();
        } else {
            alert('Failed to update user admin status');
        }
    } catch (error) {
        alert('Error: ' + error.message);
    }
}

async function toggleUserStatus(userId, isCurrentlyActive) {
    if (!confirm(`Are you sure you want to ${isCurrentlyActive ? 'deactivate' : 'activate'} this user?`)) {
        return;
    }
    
    try {
        const response = await fetch(`/admin/api/users/${userId}/toggle-status`, {
            method: 'PUT'
        });
        
        if (response.ok) {
            location.reload();
        } else {
            alert('Failed to update user status');
        }
    } catch (error) {
        alert('Error: ' + error.message);
    }
}

function updatePagination() {
    const perPage = parseInt(document.getElementById('perPage').value);
    itemsPerPage = perPage;
    
    const visibleRows = document.querySelectorAll('.user-row:not([style*="display: none"])');
    const totalVisible = visibleRows.length;
    const totalPages = Math.ceil(totalVisible / itemsPerPage);
    
    document.getElementById('totalPages').textContent = totalPages;
    document.getElementById('totalUsers').textContent = totalVisible;
    
    // Hide/show rows based on current page
    visibleRows.forEach((row, index) => {
        const start = (currentPageNum - 1) * itemsPerPage;
        const end = start + itemsPerPage;
        row.style.display = (index >= start && index < end) ? '' : 'none';
    });
    
    // Update showing range
    const start = Math.min((currentPageNum - 1) * itemsPerPage + 1, totalVisible);
    const end = Math.min(currentPageNum * itemsPerPage, totalVisible);
    document.getElementById('showingStart').textContent = start;
    document.getElementById('showingEnd').textContent = end;
    
    // Update button states
    document.getElementById('prevBtn').disabled = currentPageNum === 1;
    document.getElementById('nextBtn').disabled = currentPageNum >= totalPages;
}

function previousPage() {
    if (currentPageNum > 1) {
        currentPageNum--;
        updatePagination();
    }
}

function nextPage() {
    currentPageNum++;
    updatePagination();
}

// Close modals when clicking outside
document.getElementById('createUserModal').addEventListener('click', function(e) {
    if (e.target === this) closeCreateUserModal();
});

document.getElementById('userModal').addEventListener('click', function(e) {
    if (e.target === this) closeUserModal();
});

document.getElementById('emailModal').addEventListener('click', function(e) {
    if (e.target === this) closeEmailModal();
});

document.getElementById('importModal').addEventListener('click', function(e) {
    if (e.target === this) closeImportModal();
});

// Initialize on page load
document.addEventListener('DOMContentLoaded', function() {
    updatePagination();
});
</script>